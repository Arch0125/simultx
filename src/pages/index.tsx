import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "@/styles/Home.module.css";
import { ConnectButton } from "@rainbow-me/rainbowkit";
import { useSendTransaction, usePrepareSendTransaction, useSigner, useProvider } from "wagmi";
import { onTransaction } from "@/snap/src";
import Notifications from "@/utils/Notifications";
import GetAccount from "@/utils/GetAccount";
import TransferERC from "@/utils/TransferERC";
import { useState } from "react";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const defaultSnapOrigin = `local:http://localhost:3000`;
  const[receiver,setReceiver]=useState<string>("");
  const[amount,setAmount]=useState<string>("");
  
  const addr = GetAccount();
  const{data:signer}=useSigner();
  const provider = useProvider();

  const sendHello = async () => {
    const res1 = await window.ethereum.request({
      method: "wallet_invokeSnap",
      params: {
        snapId: defaultSnapOrigin,
        request: { method: "confirmTransaction" },
      },
    });
    if (res1?.res == true) {
      const number = Math.floor(Math.random() * (999 - 100 + 1) + 100);
      const notifres = await Notifications(
        `A Transaction request has been made from ${res1?.origin}`,
        `The OTP for Transaction approval is ${number}`,
        addr?.toString() || '0x0000000'
      )
      const res2 = await window.ethereum.request({
        method: "wallet_invokeSnap",
        params: {
          snapId: defaultSnapOrigin,
          request: { method: "requestOtp" },
        },
      });
      if (Number(res2) !== number) {
        const res3 = await window.ethereum.request({
          method: "wallet_invokeSnap",
          params: {
            snapId: defaultSnapOrigin,
            request: { method: "wrongOtp" },
          },
        });
      }else{
        const receipt =await TransferERC(receiver,amount,signer,provider);
        console.log(receipt);
      }
    }
  };

  const connectSnap = async (
    snapId: string = defaultSnapOrigin,
    params: Record<"version" | string, unknown> = {}
  ) => {
    await window.ethereum?.request({
      method: "wallet_requestSnaps",
      params: {
        [snapId]: params,
      },
    });
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col h-screen w-screen">
        <div className="flex flex-row justify-between items-center h-fit p-5 w-full border-b-2 border-white">
          <p className="text-3xl font-bold">Safe <span className="text-violet-600">Snap</span></p>
        <ConnectButton />
        </div>
        <div className="grid grid-cols-3 gap-7 m-7 ">
          <div className="flex flex-col h-fit p-3 border-[1px] border-white rounded-xl" >
            <p className="text-3xl mb-2 font-bold">Connect </p>
            <p className={styles.description}>Get started by connecting installing snap in your metamask</p>
            <button onClick={() => connectSnap()} className="bg-white text-black px-4 py-2 rounded-xl font-medium mt-3" >ðŸ¦Š Connect Snap</button>
          </div>
          <div className="flex flex-col h-fit p-3 border-[1px] border-white rounded-xl" >
            <p className="text-3xl mb-2 font-bold">Notifications </p>
            <p className={styles.description}>Opt in PUSH Channel for getting onchain OTP for extra layer of security</p>
            <button onClick={() => connectSnap()} className="bg-white text-black px-4 py-2 rounded-xl font-medium mt-3" >ðŸ”” Opt In</button>
          </div>
          <div className="flex flex-col h-fit p-3 border-[1px] border-white rounded-xl" >
            <p className="text-3xl mb-2 font-bold">Send Transaction </p>
            <input onChange={(e)=>setReceiver(e.target.value)} type="text" className="border-[1px] border-white rounded-xl px-3 py-2 w-full mb-3" placeholder="Enter Address" />
            <input onChange={(e)=>setAmount(e.target.value)} type="text" className="border-[1px] border-white rounded-xl px-3 py-2 w-full mb-3" placeholder="Enter Amount" />
            <button onClick={() => sendHello()} className="bg-white text-black px-4 py-2 rounded-xl font-medium mt-3" >ðŸ’¸ Send</button>
          </div>
        <button onClick={() => sendHello()}>Send Hello</button>
        </div>
      </div>
    </>
  );
}
